# ‚úÖ GitHub Actions Workflow for GPG Signing and C++ Verification

name: Build, Sign, Modify, and Verify ModbusTCPMaster.zip

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  GPG_PASSPHRASE: 'dwee1234@@'               # GPG passphrase
  GPG_KEY_ID: '576058DD4A6CC331'             # GPG Key ID
  DOTNET_VERSION: '9.0.x'                    # .NET version to use

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
    # ‚úÖ Step 1: Checkout Code
    - name: 'Checkout Code'
      uses: actions/checkout@v4

    # ‚úÖ Step 2: Install Required Packages
    - name: 'Install Required Packages'
      run: |
        echo "‚öôÔ∏è Installing Required Packages..."
        sudo apt-get update && sudo apt-get install -y gnupg unzip zip jq g++
        echo "‚úÖ Required Packages Installed Successfully"

    # ‚úÖ Step 3: Import GPG Private Key
    - name: 'Import GPG Private Key'
      run: |
        echo "üîê Importing GPG Private Key..."
        echo "$GPG_PRIVATE_KEY" | gpg --batch --import
        gpg --list-secret-keys --keyid-format LONG
        echo "‚úÖ GPG Key Imported Successfully"

    # ‚úÖ Step 4: Set GPG Key Trust Level
    - name: 'Set GPG Key Trust Level'
      run: |
        echo -e "trust\n5\ny\nsave\n" | gpg --batch --command-fd 0 --edit-key $GPG_KEY_ID
        echo "‚úÖ Trust Level Set Successfully"

    # ‚úÖ Step 5: Setup .NET Environment
    - name: 'Setup DotNet ${{ env.DOTNET_VERSION }} Environment'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    # ‚úÖ Step 6: Build C# GPGSigner Project
    - name: 'Build GPGSigner Program'
      run: |
        echo "‚öôÔ∏è Building GPGSigner Program..."
        dotnet build GPGSigner.csproj --configuration Release
        echo "‚úÖ Build Completed Successfully"

    # ‚úÖ Step 7: Run GPGSigner to Sign and Create ZIP
    - name: 'Run GPGSigner Program'
      run: |
        echo "üöÄ Running GPGSigner Program to Sign and Create ZIP..."
        dotnet bin/Release/net6.0/GPGSigner.dll ModbusTCPMaster.zip $GPG_KEY_ID
        echo "‚úÖ GPGSigner Execution Completed"

    # ‚úÖ Step 8: Verify that output.zip Exists
    - name: 'Verify output.zip Existence'
      run: |
        if [ -f "output.zip" ]; then
          echo "‚úÖ output.zip created successfully"
        else
          echo "‚ùå Error: output.zip not found!"
          exit 1
        fi

    # ‚úÖ Step 9: Open, Modify, and Re-zip ModbusTCPMaster.zip
    - name: 'Open, Modify & Re-zip ModbusTCPMaster.zip'
      run: |
        echo "üìÇ Unzipping output.zip..."
        unzip -o output.zip -d temp_dir
        echo "‚úÖ Unzip Complete"

        echo "üìÇ Unzipping ModbusTCPMaster.zip from extracted content..."
        if [ -f "temp_dir/ModbusTCPMaster.zip" ]; then
          unzip -o temp_dir/ModbusTCPMaster.zip -d temp_dir/ModbusTCPMaster
          echo "‚úÖ ModbusTCPMaster.zip extracted successfully"
        else
          echo "‚ùå Error: ModbusTCPMaster.zip not found!"
          exit 1
        fi

        echo "üìù Modifying package_config.json..."
        PACKAGE_CONFIG="temp_dir/ModbusTCPMaster/package_config.json"

        # Check if the file exists
        if [ -f "$PACKAGE_CONFIG" ]; then
          # Modify the content (Example: Increment version number)
          jq '.version += 1' "$PACKAGE_CONFIG" > temp_dir/ModbusTCPMaster/package_config_updated.json
          mv temp_dir/ModbusTCPMaster/package_config_updated.json "$PACKAGE_CONFIG"
          echo "‚úÖ package_config.json modified successfully"
        else
          echo "‚ùå Error: package_config.json not found!"
          exit 1
        fi

        echo "üì¶ Zipping ModbusTCPMaster content again..."
        cd temp_dir/ModbusTCPMaster
        zip -r ModbusTCPMaster.zip .
        mv ModbusTCPMaster.zip ../
        cd ../..

        echo "üì¶ Replacing modified ModbusTCPMaster.zip in output.zip..."
        cd temp_dir
        zip -r ../output.zip *
        cd ..
        echo "‚úÖ output.zip updated successfully"

    # ‚úÖ Step 10: Verify Updated output.zip Existence
    - name: 'Verify Updated output.zip'
      run: |
        if [ -f "output.zip" ]; then
          echo "‚úÖ Updated output.zip found successfully"
        else
          echo "‚ùå Error: Updated output.zip not found!"
          exit 1
        fi

    # ‚úÖ Step 11: Upload Updated ZIP as Artifact
    - name: 'Upload Updated Artifacts'
      uses: actions/upload-artifact@v4
      with:
        name: updated-artifacts
        path: output.zip


    # ‚úÖ Step 12: Build C++ Verifier
    - name: 'Build C++ Verifier'
      run: |
        echo "‚öôÔ∏è Building C++ Verifier..."
        g++ -o GPGVerifier GPGVerifier.cpp
        echo "‚úÖ C++ Build Completed Successfully"

    # ‚úÖ Step 13: Unzip Updated output.zip for C++ Verification
    - name: 'Unzip Updated output.zip for Verification'
      run: |
        echo "üìÇ Unzipping updated output.zip for verification..."
        unzip -o output.zip -d verification_dir
        echo "‚úÖ Unzip Complete"

    # ‚úÖ Step 14: Run C++ Verification on Extracted Files
    - name: 'Run C++ Verification'
      run: |
        echo "üîç Running C++ Verification on Extracted Files..."
        ./GPGVerifier > verification_output.txt 2>&1
        echo "‚úÖ C++ Verification Completed"

    # ‚úÖ Step 15: Print C++ Verification Output
    - name: 'Print C++ Verification Output'
      run: |
        echo "üìÑ Printing C++ Verification Output..."
        if [ -f "verification_output.txt" ]; then
          cat verification_output.txt
        else
          echo "‚ö†Ô∏è No verification_output.txt file found"
        fi

    # ‚úÖ Step 16: Upload Verification Results as Artifact
    - name: 'Upload Verification Results'
      uses: actions/upload-artifact@v4
      with:
        name: verification-results
        path: verification_output.txt
