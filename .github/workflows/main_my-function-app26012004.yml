name: Sign and Verify GPG Artifacts
env:
  AZURE_FUNCTIONAPP_NAME: 'my-function-app26012004'  
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'      
  DOTNET_VERSION: '8.0.x'        

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: 'Checkout Code'
      uses: actions/checkout@v4

    - name: 'Import GPG Private Key'
      run: |
        echo "üîê Importing GPG Private Key..."
        echo "$GPG_PRIVATE_KEY" | base64 --decode | gpg --batch --import
        gpg --list-secret-keys --keyid-format LONG
        echo "‚úÖ GPG Key Imported Successfully"
      env:
        GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
    
    - name: 'Set GPG Key Trust'
      run: |
        echo "52734E8E778377946DDD0AA0576058DD4A6CC331:6" | gpg --import-ownertrust
        echo "‚úÖ GPG Key Trust Set Successfully"

    - name: Set GPG Passphrase
      run: |
        echo "GPG_PASSPHRASE=${{ secrets.GPG_PASSPHRASE }}" >> $GITHUB_ENV
    
    # ‚úÖ Step 5: Setup .NET Environment
    - name: 'Setup DotNet ${{ env.DOTNET_VERSION }} Environment'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    # ‚úÖ Step 6: Build C# GPGSigner Project
    - name: 'Build GPGSigner Program'
      run: |
        echo "‚öôÔ∏è Building GPGSigner Program..."
        dotnet build GPGSigner.csproj --configuration Release
        echo "‚úÖ Build Completed Successfully"
    
    # ‚úÖ Step 7: Sign ModbusTCPMaster.zip
    - name: 'Sign ModbusTCPMaster.zip'
      run: |
        echo "üîè Signing ModbusTCPMaster.zip..."
        dotnet bin/Release/net8.0/GPGSigner.dll "$(pwd)/ModbusTCPMaster.zip" $GPG_KEY_ID
        echo "‚úÖ ModbusTCPMaster.zip signed successfully."
      env:
        GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

    # ‚úÖ Step 8: Verify that output.zip Exists
    - name: 'Verify output.zip Existence'
      run: |
        if [ -f "output.zip" ]; then
          echo "‚úÖ output.zip created successfully"
        else
          echo "‚ùå Error: output.zip not found!"
          exit 1
        fi

    # # ‚úÖ Step 9: Open, Modify, and Re-zip ModbusTCPMaster.zip
    # - name: 'Open, Modify & Re-zip ModbusTCPMaster.zip'
    #   run: |
    #     echo "üìÇ Unzipping output.zip..."
    #     unzip -o output.zip -d temp_dir
    #     echo "‚úÖ Unzip Complete"
    
    #     echo "üìÇ Unzipping ModbusTCPMaster.zip from extracted content..."
    #     if [ -f "temp_dir/ModbusTCPMaster.zip" ]; then
    #       unzip -o temp_dir/ModbusTCPMaster.zip -d temp_dir/ModbusTCPMaster
    #       echo "‚úÖ ModbusTCPMaster.zip extracted successfully"
    #     else
    #       echo "‚ùå Error: ModbusTCPMaster.zip not found!"
    #       exit 1
    #     fi
    
    #     echo "üìù Modifying Project1.deps.json..."
    #     PACKAGE_CONFIG="temp_dir/ModbusTCPMaster/Project1.deps.json"
    
    #     # Check if the file exists
    #     if [ -f "$PACKAGE_CONFIG" ]; then
    #       # Modify the content (Example: Increment version number)
    #       jq '.version += 1' "$PACKAGE_CONFIG" > temp_dir/ModbusTCPMaster/Project1.deps_updated.json
    #       mv temp_dir/ModbusTCPMaster/Project1.deps_updated.json "$PACKAGE_CONFIG"
    #       echo "‚úÖ package_config.json modified successfully"
    #     else
    #       echo "‚ùå Error: Project1.deps.json not found!"
    #       exit 1
    #     fi
    
    #     echo "üì¶ Zipping ModbusTCPMaster content again..."
    #     cd temp_dir/ModbusTCPMaster
    #     zip -r ModbusTCPMaster.zip .
    #     mv ModbusTCPMaster.zip ../
    #     cd ../..
    
    #     echo "üßπ Removing ModbusTCPMaster folder..."
    #     rm -rf temp_dir/ModbusTCPMaster
    #     echo "‚úÖ ModbusTCPMaster folder removed successfully"
    
    #     echo "üì¶ Replacing modified ModbusTCPMaster.zip in output.zip..."
    #     cd temp_dir
    #     zip -r ../output.zip *
    #     cd ..
    #     echo "‚úÖ output.zip updated successfully"

    # ‚úÖ Step 10: Verify Updated output.zip Existence
    - name: 'Verify Updated output.zip'
      run: |
        if [ -f "output.zip" ]; then
          echo "‚úÖ Updated output.zip found successfully"
        else
          echo "‚ùå Error: Updated output.zip not found!"
          exit 1
        fi

    # # ‚úÖ Step 11: Upload Updated ZIP as Artifact
    # - name: 'Upload Updated Artifacts'
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: updated-artifacts
    #     path: output.zip


    # ‚úÖ Step 12: Build C++ Verifier
    - name: 'Build C++ Verifier'
      run: |
        echo "‚öôÔ∏è Building C++ Verifier..."
        g++ -o GPGVerifier GPGVerifier.cpp
        echo "‚úÖ C++ Build Completed Successfully"


    # ‚úÖ Step 14: Run C++ Verification on Extracted Files
    - name: 'Run C++ Verification'
      run: |
        echo "üîç Running C++ Verification on Extracted Files..."
        ./GPGVerifier > verification_output.txt
        
        # Check exit code after running the verifier
        if [ $? -ne 0 ]; then
          echo "‚ùå C++ Verification Failed! Terminating Deployment."
          exit 1
        else
          echo "‚úÖ C++ Verification Completed Successfully"
        fi
    
    # ‚úÖ Step 15: Print C++ Verification Output
    - name: 'Print C++ Verification Output'
      run: |
        echo "üìÑ Printing C++ Verification Output..."
        if [ -f "verification_output.txt" ]; then
          cat verification_output.txt
        else
          echo "‚ö†Ô∏è No verification_output.txt file found"
        fi
    
    # # ‚úÖ Step 16: Upload Verification Results as Artifact
    # - name: 'Upload Verification Results'
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: verification-results
    #     path: verification_output.txt


    # ‚úÖ Step 17: Create a Common ZIP File with Both Artifacts
    - name: 'Create Final ZIP with All Artifacts'
      run: |
        echo "üì¶ Creating final_artifacts.zip with both artifacts..."
        mkdir final_artifacts
        cp output.zip final_artifacts/
        cp verification_output.txt final_artifacts/
        cd final_artifacts
        zip -r ../final_artifacts.zip *
        cd ..
        echo "‚úÖ final_artifacts.zip created successfully"
    
    # ‚úÖ Step 18: Upload Final ZIP as Artifact
    - name: 'Upload Final ZIP with All Artifacts'
      uses: actions/upload-artifact@v4
      with:
        name: final-artifacts
        path: final_artifacts.zip
  
   # ‚úÖ Step 10: Deploy to Azure Function App
    - name: 'Deploy to Azure Function App'
      uses: Azure/functions-action@v1
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
        package: './output.zip'
        publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}
    
    # ‚úÖ Step 19: Clean Up Intermediate Files
    - name: 'Clean Up Intermediate Files'
      run: |
        echo "üßπ Cleaning up intermediate files..."
        rm -rf output.zip verification_output.txt final_artifacts
        echo "‚úÖ Cleanup complete"


