# ✅ GitHub Actions Workflow for GPG Signing and C++ Verification

name: Build, Sign, Modify, and Verify ModbusTCPMaster.zip

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  GPG_PRIVATE_KEY: "-----BEGIN PGP PRIVATE KEY BLOCK-----\n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\n=0TQR\n-----END PGP PRIVATE KEY BLOCK-----"
  GPG_PASSPHRASE: 'dwee1234@@'               # GPG passphrase
  GPG_KEY_ID: '576058DD4A6CC331'             # GPG Key ID
  DOTNET_VERSION: '9.0.x'                    # .NET version to use

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
    # ✅ Step 1: Checkout Code
    - name: 'Checkout Code'
      uses: actions/checkout@v4

    # ✅ Step 2: Install Required Packages
    - name: 'Install Required Packages'
      run: |
        echo "⚙️ Installing Required Packages..."
        sudo apt-get update && sudo apt-get install -y gnupg unzip zip jq g++
        echo "✅ Required Packages Installed Successfully"

    # ✅ Step 3: Import GPG Private Key
    - name: 'Import GPG Private Key'
      run: |
        echo "🔐 Importing GPG Private Key..."
        echo "$GPG_PRIVATE_KEY" | gpg --batch --import
        gpg --list-secret-keys --keyid-format LONG
        echo "✅ GPG Key Imported Successfully"

    # ✅ Step 4: Set GPG Key Trust Level
    - name: 'Set GPG Key Trust Level'
      run: |
        echo -e "trust\n5\ny\nsave\n" | gpg --batch --command-fd 0 --edit-key $GPG_KEY_ID
        echo "✅ Trust Level Set Successfully"

    # ✅ Step 5: Setup .NET Environment
    - name: 'Setup DotNet ${{ env.DOTNET_VERSION }} Environment'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    # ✅ Step 6: Build C# GPGSigner Project
    - name: 'Build GPGSigner Program'
      run: |
        echo "⚙️ Building GPGSigner Program..."
        dotnet build GPGSigner.csproj --configuration Release
        echo "✅ Build Completed Successfully"

    # ✅ Step 7: Run GPGSigner to Sign and Create ZIP
    - name: 'Run GPGSigner Program'
      run: |
        echo "🚀 Running GPGSigner Program to Sign and Create ZIP..."
        dotnet bin/Release/net6.0/GPGSigner.dll ModbusTCPMaster.zip $GPG_KEY_ID
        echo "✅ GPGSigner Execution Completed"

    # ✅ Step 8: Verify that output.zip Exists
    - name: 'Verify output.zip Existence'
      run: |
        if [ -f "output.zip" ]; then
          echo "✅ output.zip created successfully"
        else
          echo "❌ Error: output.zip not found!"
          exit 1
        fi

    # ✅ Step 9: Open, Modify, and Re-zip ModbusTCPMaster.zip
    - name: 'Open, Modify & Re-zip ModbusTCPMaster.zip'
      run: |
        echo "📂 Unzipping output.zip..."
        unzip -o output.zip -d temp_dir
        echo "✅ Unzip Complete"

        echo "📂 Unzipping ModbusTCPMaster.zip from extracted content..."
        if [ -f "temp_dir/ModbusTCPMaster.zip" ]; then
          unzip -o temp_dir/ModbusTCPMaster.zip -d temp_dir/ModbusTCPMaster
          echo "✅ ModbusTCPMaster.zip extracted successfully"
        else
          echo "❌ Error: ModbusTCPMaster.zip not found!"
          exit 1
        fi

        echo "📝 Modifying package_config.json..."
        PACKAGE_CONFIG="temp_dir/ModbusTCPMaster/package_config.json"

        # Check if the file exists
        if [ -f "$PACKAGE_CONFIG" ]; then
          # Modify the content (Example: Increment version number)
          jq '.version += 1' "$PACKAGE_CONFIG" > temp_dir/ModbusTCPMaster/package_config_updated.json
          mv temp_dir/ModbusTCPMaster/package_config_updated.json "$PACKAGE_CONFIG"
          echo "✅ package_config.json modified successfully"
        else
          echo "❌ Error: package_config.json not found!"
          exit 1
        fi

        echo "📦 Zipping ModbusTCPMaster content again..."
        cd temp_dir/ModbusTCPMaster
        zip -r ModbusTCPMaster.zip .
        mv ModbusTCPMaster.zip ../
        cd ../..

        echo "📦 Replacing modified ModbusTCPMaster.zip in output.zip..."
        cd temp_dir
        zip -r ../output.zip *
        cd ..
        echo "✅ output.zip updated successfully"

    # ✅ Step 10: Verify Updated output.zip Existence
    - name: 'Verify Updated output.zip'
      run: |
        if [ -f "output.zip" ]; then
          echo "✅ Updated output.zip found successfully"
        else
          echo "❌ Error: Updated output.zip not found!"
          exit 1
        fi

    # ✅ Step 11: Upload Updated ZIP as Artifact
    - name: 'Upload Updated Artifacts'
      uses: actions/upload-artifact@v4
      with:
        name: updated-artifacts
        path: output.zip


    # ✅ Step 12: Build C++ Verifier
    - name: 'Build C++ Verifier'
      run: |
        echo "⚙️ Building C++ Verifier..."
        g++ -o GPGVerifier GPGVerifier.cpp
        echo "✅ C++ Build Completed Successfully"

    # ✅ Step 13: Unzip Updated output.zip for C++ Verification
    - name: 'Unzip Updated output.zip for Verification'
      run: |
        echo "📂 Unzipping updated output.zip for verification..."
        unzip -o output.zip -d verification_dir
        echo "✅ Unzip Complete"

    # ✅ Step 14: Run C++ Verification on Extracted Files
    - name: 'Run C++ Verification'
      run: |
        echo "🔍 Running C++ Verification on Extracted Files..."
        ./GPGVerifier > verification_output.txt 2>&1
        echo "✅ C++ Verification Completed"

    # ✅ Step 15: Print C++ Verification Output
    - name: 'Print C++ Verification Output'
      run: |
        echo "📄 Printing C++ Verification Output..."
        if [ -f "verification_output.txt" ]; then
          cat verification_output.txt
        else
          echo "⚠️ No verification_output.txt file found"
        fi

    # ✅ Step 16: Upload Verification Results as Artifact
    - name: 'Upload Verification Results'
      uses: actions/upload-artifact@v4
      with:
        name: verification-results
        path: verification_output.txt
