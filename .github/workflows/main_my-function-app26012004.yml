# ‚úÖ GitHub Actions Workflow for GPG Signing and C++ Verification

name: Build, Sign, Modify, and Verify ModbusTCPMaster.zip

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  GPG_PRIVATE_KEY: "LS0tLS1CRUdJTiBQR1AgUFJJVkFURSBLRVkgQkxPQ0stLS0tLQoKbFFXR0JHZTluZVlCREFER0RJVVFPY3MrRTZ1aFRKUjRVVUxYM3BKN3lhZVNZSjRERW5FQXhqM2tZb3V4SkswNQpadzV2QlFPS1R6SlJUQVNzMkE4aWx1QlMrUWVOSllWaVhFdnF6YVFvdnpncXlJSWVyVk1kTkpFdXJGRlhiRTlTClp0NjZ5Y0NaRVhCMVQ1cXl5TzJsOFl3aU9ieXFFSGpmRFczWnhjbGdmUXNuTlIxMTF2ZjhKME1uQjNNb1hsbjkKK2RtYmYyR2d6cExqTWtIUk8yZ0NFblllM2pJbWNKVlhxL25TN01QNFlyb24rSnpLVUdqNFZpNSt4dzVVQ3VkeQpaVjZRcW9qdWQxRzZxOTRnMU80RDQ3alN6bzRlSEpWR2ZrTWwyb3RRd1oweHlJck1WSWVmNEsvak9VaWtQT3pZCk5aVXlTZUxEdDM2MjhVQ2wwN2hMa3Q0UVF4Mkw5NnB6N1QzeUtlcG9GT1VkdTBObkZhSCtSUTU4NnJhSU80T1UKck1obHE3UUtsdjNzZFpCSDRVWU0yc2hzY0hUVE5PVXBHVlUrVUN6L05oOU5SRlJ4UXhrVWt2bFYrSTVraDFSVgpxZEZUOWFqZFBLdThxSGNjQ29WdWxidmU3V1BmL242ZGtBVXYvYjY4TnAvWk5zdnV1d2JLaFVnc2h6dkFKZGpJCkYreWc5ODVlaWFZZUNoVUFFUUVBQWY0SEF3SVc4dXJIbDR1QXJ2Nit6VC83Ry9BTlpWNXJubHo3MnB1dWp2SjgKNkREV2JPVWMwMS9iYllsdVpJZG9iSERRVHk0cU5idGJFeEEvb25MRVdIekdrNVJIMStqSkcvZHFqUUdpRHRxNAp3VDR6aG11VlhxclZuZEoxV2Fna3kvSXJHVVdCM3d4cDJQNTVYcGxkK1FVS0FFNXh2dlRNQXdYMkNmV1ZtMXpZCkg3Nml4eGh0b0NzcCswam55VlVPcG4zMThMNWJTUWZkTmxXWUpjSHhCK3NtWTlmNDUrWCtKNGUvdjI5a244MjAKOGhZbkNGWlI0ZWxFNkJYaGNTM1YzZXJ0WGJqWmxkZlJKQUtPYWdJdDdiYmFIU3gwWEE5ZFVBN3k1eTM3Q1QwcQpnTFpQbWM2NTZhSjAwOE9QWUJaamZaanpTUnhtdzRud2liYzd1emU2RFd0WXllVG1hd2lZSlFkaTd5cGJRWURJCnFORU9MN1BLL3I0aS9KdUF4UXJPemUwbUswZUp3d1l3RVl6VzV5S1JJeEp1UUtIZ0dQTjVydjNIdEJuRDVHRzcKNFNpWTRZd3JJd1dSTW16MVRWL0FvemdScWVJT29wSSthcDN4ZWJBbTZacU9lQzFXTVcwRDRMS1VOL2xwUlcvdgoveS92YjZ6dEY3emIwNFhzdENiK1MrQ2xSZTU1SS9TN2VaVy82b2lyVlg0S2J5cGVYM1ZsYzVCVmVlNE52VDFLCk9kaFhlY3VtYTRvdnZHOWdLUGVFTDBQRnBqV3lzQ25jK3p3aVJGMUM1anc2YWVkQUFEZXlhWklPSC8vT3FtMlcKUFV2OTJmS1QySGZtdFhxdGhLd3ZabVlkVHdEUzdWeUdKQ3c4Q204Q0d3d2tVQnoxUkptMUljeEtSM24xcVl4Vgo4KzNkQnhqUUFLTnFBdWdSNEUydzJ3ekxUNTUzaFhUUU9uTVhOeWFGRVJYSlluVmJuMTlEUmhwK1hPRFhBN3Y4Cml2SlZ6MlNjZk5pT2J0cUdjYURkZFptTDdCR1FlUDNNWGlMRkwrcjRRSFNOZ3pQWkJ6UHZFbzNhUDdGY0Z3WkYKeTFpUVlrVXY3ZVRyWUszTGY0WTVGNFJWRFZLc05PajZudTdtTFZDVjJKUmxRNHRBTVFoUU0zVmx3cmI0MHlTdwpNZFVrWmpPL0g2UFR0TncxelN5U0NVUWgvVHB4VG91cENpazJlMHBUWDVpZlcza3Q2QmtiU2hheTBoY0hLZ01iCkwySXgyYy95cjhSN0JaQ0ppT1hPMnloWXdPdUt3L25uR1JRRzRxM3pxNnVWWlFSZXBpaVdnUFFQajExYlM4eEgKVkVnQy80TS82V3BKMnVTblNFVDZ0RjlpVndBRDVhT3JyVnRRV2Z2aUN1Skp5S2FFcjdSeDNjbUdZT1lGcVZacQo2S0JJalhveUFZV1dveGZLanlFMkVrVk5uS2pxdSt3dE1IRWxGTjBWQjZtaFRjNVFiWjFkVWFydXhoNVVtNVpKCk5iYWxnSFRnNlJtdW1IZkNVZTBMeUtzeGpIUDQ3Q3ZaVGx6ejFXeFcwRTI0UTk0S3ZSL09TWnNOOGNYejVNS3QKSTQzQ1YxaG0rSndBMXRUSG1BeW9yQzI1N2xRbkt1eWJFNHhMb1JHbU5PeForU21BMDFqUVFrTTN0QzJ2NnRzVAp3bVZ4c2ozbVpVbVdPTGRsWG9zbXNVQ2cwNThjNFoxSXpQMGQ4WjNKVFVkbXVMREs3R1FCZHJxUG1WVjJPSWlBClVnQUNzNitaQ25hdjJCeVRvd3JXM3l4eDhaUnBSSVFSUWJRZ1JIZGxaV29nVUdGdVpIbGhJRHhrZDJWbGFqSTIKUUdkdFlXbHNMbU52YlQ2SkFkY0VFd0VJQUVFV0lRUlNjMDZPZDROM2xHM2RDcUJYWUZqZFNtekRNUVVDWjcyZAo1Z0liQXdVSkFIYW5BQVVMQ1FnSEFnSWlBZ1lWQ2drSUN3SUVGZ0lEQVFJZUJ3SVhnQUFLQ1JCWFlGamRTbXpECk1lN2xDL3dNVEpjbVkwcTNMK25PTWV5dHgreVZlZUNMZFVHbVVpZFlKYkFRek1HbmZDUWNQQm9LMmFFUlNvWHIKQjdEaVpSa3hvYzdpdEg5QmFHTmZlWHF3QmFtMjFNK1dxQkhCQ21EMmhIV0lldXhON1dHdXNuMmxhZmpWNU5CRQpNbFVtTTl1VVo3TG4rcFFXVTd3Kzg4TTh0SXpMTFl2bkNLM1hyOEdCdFlFekV3YTRVd0dQeEYvODg3L3VnZHVPCittL3MyanhSMW5MSzNvUHYzMmpienFCa3ZHVkVpNDNkdU93dUJwVmlyMUoxSXpINkJvTXRXUmNXMzl0UWVJMDgKZmV3VHM4OFVRc2JHSVp0VGRQVi85V0lTV3FnTUdMTlhYcFAveEQyVW5HdnhpRFZxUXFFcnVqOEdyYmRqN2VzQwpKZjRFcnk0cGJnY3BzLzRsc2RqdXBrY2I4ZVpZSXY4dTdOUUh3VG8zcVFYc2FacUxPZzZYRThEb0dPNDIyVnkvCnBuK0NLMm9XenhPRkZ1c3RwZTN6dTR5N3ZRNG45TEUwM3NlU0s3UzJMcGIzckFPVXUvdWljeXg4c0pFTHhuMkEKMVF4UmNDRGdFVE80cW9odkpzL2ViMjFJdzNNVFQvdEhUbVFvdWVSRENVUE1yUXgvSG5wc3YrWFZhbGViT0p6RgpyK1JVdlZDZEJZWUVaNzJkNWdFTUFMOGk4TFNNZ2c4cWY0SGpJSDU5d0x4OWdDdW5vY1JUQTN5WDIwS2xtWnFlClpkd1ZGamdiU21YdHBkdldON1B1Y3BYM3Y2NG5VY2c5SkkrOGpOYkM3ZW1kdHdOU3FKS2UwVjhCVXN6cFQ0MlAKWlZMK2dYMk9KUEk3ZjhTOHVTWUZnQTltbm1DNkNLSlJ0Y3R3Uk9iSHFDRVBWckdYclJ2UUlnWEVEa1NKRktsZApJaXFEbXFtV213Q2pVanczRHdWYTBNd09IS3ZSc3hHYjRQUlJkQkhVeWdlVUp2YnNsRnpncWtZSDgyMUV1VkppCkJZeDI4T3VDZk8xcWRkaU93eVdyNGg5NDlOaC9vbFQya0xIbTJiUlVvMk5XdVZYenZOOEltOHFGOXNkU3NSQjQKSXUwVTg4WDhGTXc2Tys4aTB1bmdLNE5xbk1aRVE4aHdwTTBOcktBaCtwVGd0SjkzazNQRi8rWC9MTFFVdFA1SQpKeGxpYVkxWkdVRzRkMXU5aU1OZERvYUtHMm5rY0NpSklhditmaWFZRmM2d3ZqWVpDejJDOUJ4MDg0NjRFRXVPCjJEZkdsZDloa3BRVXJXSXhQSW1lQ2Y2MWM2Z21oWDg1ZTlRVVFGWjYwaTlXelpTUkZISVhFd2t3bDZzdDlMZmwKOURMV3hOaHlsMVE5QUt0cVJvZTNOUUFSQVFBQi9nY0RBc3hxUnk2KzlCV3UvcVc3aks1TG0yam5WdzJvUXlsNwozak1QemFQUGt5Vll2bnZSenZ5d1Fxc2JLblVERy9tRTZHYzEzK2IxR3NBaHp1RzJuc0FRKzBQbWxnNmNyWXBaClpjT3NiVDhiQ1JYVGpXY1BQb1Npa05LU24vclAwczQzaklvWkFJNkN2WnpxUnZINys1ejhGOTJjRjR6bTRzaFkKTDRxQXFsNUgzZWZWMWFhamo5a3pIUEg5VXhhYXJIelJuQzBGMVlGeTJFTm5YSHAwakMxdkZjVmpPZW03dWpRbQo4ZThuZVNFUkNDelV4bHBMSkkrT1FPREtuVkhiQVM0RkpSVkhoTGpzRk9SWEdlbE9LQjhwNGVIRkZ3alJpZEtFCkVpTG9KOXFBRnk2RGJLbDhKQU1KM3NhT2ZZWGlzamN2OUI4dWFCSnpZTmRiRTh5N3BYRVpneUJTUHlsOXo2U2YKL2Z1blZlVHpMNTFwVC9PRXFUamo5WGFjTVJtdVZMMjZQLzBJa3pvYXlPUjh4NFc3aEx3d0dQWUFMZUliMkVzSwp0OWRkb0xZVS9KT1VnVWJPK0NyUTIyUGRZRDVZR1BNNGRtWHVoVzBiWkgzdy9CTCtOVmoybzVGTEYxODg4eTM4CktRbUhkM0hTaWFQNk1id0lvZEtsd0M0bGJBc0kva1NENTN3NytjR3BhbSsvcmZabjF3M3UvbTljSlBhemZ5QlMKQVU1NS82ZEFmMy9vbzhmZ3JMKzlUalBLbUIzUlB4eS8yWS9HZGxmVnhKenM0aWx1emRxL2oxa0IvRVF6cUhtZQpkMVZQcFlVbjFqdU1DSitFazJaZnBaY2FQeXlrNWlCKy8zSlM2QXFTZDU4WjJBZGxwZ0J3NTBqek1nUlBaRzdoCnZRQWJucTlMek56dzBMQThlR3FQazFNdzBSdnNNSTlMSW1kOHNGT1ZiZEFJcnlzdnRWcm9ZSWJ1Tm8wL0t3WXAKd1lGWG1tTzBlS2NYaDM1RlpoUlFxVCt1aHQyVnp3WWJhblIrV0NncmJqTnJwbzI4amgvWjgzY0lSYmhYK0RkUQpQTmVoTkRNQVMwbkk0ZjRSSlBIRzJ6Q1lYSFo4UU5xQkFkS1BXU1dweldZV09aS3l1T0RZdlRiZ0syRk5iazY0CmxDMmhwbERudWtNVXU0SU1ua1h2eXVsQm9wMS9yeVpoSzc5OTZYMng5TDdxR2RtWUQ4SVdhMUFPb3dtekdQb0EKQmF1YVBGTDQrWmpESm1pNDBya3lucnREeUt5YTZnR3cwWHY1aXZKMzdQRE51R0wzT1MyOEpQUHJTQzJyQTZJWgpuSlpPUXdxUU52RzVKVWhJRFBPYWRIcjlja0tiejZHZlRIekVnN25tZWg3S1VMcEs1NzR2dTlXZk9tbmk0TVdsCi9Ob0k0Q3BOOHZOT2NQUmhubThLWlA5eGtCUXZmb3JqcmZyU05vRGNwcllZR0ErTXNBOXpvSDdGWFZ5TWJxQUcKV0lHVWFraFdWK3pSeWo2Y09oUGhHMVdCQ0ZVNU9tMWdQNDNWdGU5SFgvT3J6ZmdzRHpxUEE1L2p3YjVmTW5UYgpPbXc2RkpVeFdPU1hVRmFodXRkNjc1V0pnV1hIWVErRnhGTytPOW1QQ3ppSkdBR3BNdUd0Y0QxMSsxOXZHUTBxClE0UUZqMkZIaURqeStQM3lLY2Y0a3BSeUJ1cEpYbFU3em5BVHZkNmNrbFZrT2wzZk5zZFk3eUFNekRtWDJhUDMKb2txbS9QajVqMFJTRWFYQll2K2UwMkVUQjQvOWJ3MmhSQURoOVR2ZWlRRzhCQmdCQ0FBbUZpRUVVbk5Pam5lRApkNVJ0M1FxZ1YyQlkzVXBzd3pFRkFtZTluZVlDR3d3RkNRQjJwd0FBQ2drUVYyQlkzVXBzd3pFcWFBdi9mM0RECm5jbWc3R24wTjZEUEdZa0ZrUUVRQjliWlM3SGp6NzJocWY1TTNFTFpNQTNXREkzT1FGVzJnZGZzdURQUWpFM24KV0NPZUlMYkNsYWh0bWdPcElJL0ZLY1dZU0RQWTlSV2s2ODhvYWF3K09aV0s1RnJQbmZkdW0yR1hXR0hUUmZiWQpjak52K1RacTI4VzFkQ2QzOE8vUno4MGk4TEViMnNpc0NPa1hVdHAwUXhFNGphbFJOZ0NlOHhQVlRvWTRVYTRzCnBJcDJ1VDBFTGtWS21YTjJTOWFjRnpFSHNhb2RkNldmaWhmL3FwS1lMV2crL2NXVXVPOEhpdG9iMFppbGM2SkwKVS8wcllxT08vNWYwTmlVd1Y3V0hMUU16UzVlRS9zUW03MFRTWU5KN3QvSG1KYS9kczNaRHllaytDendzaHFWagp1VUt5Ukp4d2xIQUFoMmFvU05abWFFS0Y4YXc0Z1hxeGRDb09SNkV5cXc4VllTMzgwQTdnQ3orY2ZKMDJZanlzCjh2L0dYSDYrSUtNVHJvYkQrNVpUYXljNFZzdngvRmlTNDNvODd2NHlCZ1o3WDFhdWtMdWhZTkZ5RWRBa3NsWlAKc3M2QTNVUHd6ZVFlck1ZVDZnbzhjT2V4Q0RSbTBKUmMvVGdiMnR0R1pHTEhhZlRBV1BMeWVOR3JxZnZJCj0wVFFSCi0tLS0tRU5EIFBHUCBQUklWQVRFIEtFWSBCTE9DSy0tLS0tCg=="
  GPG_PASSPHRASE: 'dwee1234@@'               # GPG passphrase
  GPG_KEY_ID: '576058DD4A6CC331'             # GPG Key ID
  DOTNET_VERSION: '9.0.x'                    # .NET version to use

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
    # ‚úÖ Step 1: Checkout Code
    - name: 'Checkout Code'
      uses: actions/checkout@v4

    # ‚úÖ Step 2: Install Required Packages
    - name: 'Install Required Packages'
      run: |
        echo "‚öôÔ∏è Installing Required Packages..."
        sudo apt-get update && sudo apt-get install -y gnupg unzip zip jq g++
        echo "‚úÖ Required Packages Installed Successfully"

    # ‚úÖ Step 3: Import GPG Private Key
    - name: 'Import GPG Private Key'
      run: |
        echo "üîê Importing GPG Private Key..."
        echo "$GPG_PRIVATE_KEY" | gpg --batch --import
        gpg --list-secret-keys --keyid-format LONG
        echo "‚úÖ GPG Key Imported Successfully"

    # ‚úÖ Step 4: Set GPG Key Trust Level
    - name: 'Set GPG Key Trust Level'
      run: |
        echo -e "trust\n5\ny\nsave\n" | gpg --batch --command-fd 0 --edit-key $GPG_KEY_ID
        echo "‚úÖ Trust Level Set Successfully"

    # ‚úÖ Step 5: Setup .NET Environment
    - name: 'Setup DotNet ${{ env.DOTNET_VERSION }} Environment'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    # ‚úÖ Step 6: Build C# GPGSigner Project
    - name: 'Build GPGSigner Program'
      run: |
        echo "‚öôÔ∏è Building GPGSigner Program..."
        dotnet build GPGSigner.csproj --configuration Release
        echo "‚úÖ Build Completed Successfully"

    # ‚úÖ Step 7: Run GPGSigner to Sign and Create ZIP
    - name: 'Run GPGSigner Program'
      run: |
        echo "üöÄ Running GPGSigner Program to Sign and Create ZIP..."
        dotnet bin/Release/net6.0/GPGSigner.dll ModbusTCPMaster.zip $GPG_KEY_ID
        echo "‚úÖ GPGSigner Execution Completed"

    # ‚úÖ Step 8: Verify that output.zip Exists
    - name: 'Verify output.zip Existence'
      run: |
        if [ -f "output.zip" ]; then
          echo "‚úÖ output.zip created successfully"
        else
          echo "‚ùå Error: output.zip not found!"
          exit 1
        fi

    # ‚úÖ Step 9: Open, Modify, and Re-zip ModbusTCPMaster.zip
    - name: 'Open, Modify & Re-zip ModbusTCPMaster.zip'
      run: |
        echo "üìÇ Unzipping output.zip..."
        unzip -o output.zip -d temp_dir
        echo "‚úÖ Unzip Complete"

        echo "üìÇ Unzipping ModbusTCPMaster.zip from extracted content..."
        if [ -f "temp_dir/ModbusTCPMaster.zip" ]; then
          unzip -o temp_dir/ModbusTCPMaster.zip -d temp_dir/ModbusTCPMaster
          echo "‚úÖ ModbusTCPMaster.zip extracted successfully"
        else
          echo "‚ùå Error: ModbusTCPMaster.zip not found!"
          exit 1
        fi

        echo "üìù Modifying package_config.json..."
        PACKAGE_CONFIG="temp_dir/ModbusTCPMaster/package_config.json"

        # Check if the file exists
        if [ -f "$PACKAGE_CONFIG" ]; then
          # Modify the content (Example: Increment version number)
          jq '.version += 1' "$PACKAGE_CONFIG" > temp_dir/ModbusTCPMaster/package_config_updated.json
          mv temp_dir/ModbusTCPMaster/package_config_updated.json "$PACKAGE_CONFIG"
          echo "‚úÖ package_config.json modified successfully"
        else
          echo "‚ùå Error: package_config.json not found!"
          exit 1
        fi

        echo "üì¶ Zipping ModbusTCPMaster content again..."
        cd temp_dir/ModbusTCPMaster
        zip -r ModbusTCPMaster.zip .
        mv ModbusTCPMaster.zip ../
        cd ../..

        echo "üì¶ Replacing modified ModbusTCPMaster.zip in output.zip..."
        cd temp_dir
        zip -r ../output.zip *
        cd ..
        echo "‚úÖ output.zip updated successfully"

    # ‚úÖ Step 10: Verify Updated output.zip Existence
    - name: 'Verify Updated output.zip'
      run: |
        if [ -f "output.zip" ]; then
          echo "‚úÖ Updated output.zip found successfully"
        else
          echo "‚ùå Error: Updated output.zip not found!"
          exit 1
        fi

    # ‚úÖ Step 11: Upload Updated ZIP as Artifact
    - name: 'Upload Updated Artifacts'
      uses: actions/upload-artifact@v4
      with:
        name: updated-artifacts
        path: output.zip


    # ‚úÖ Step 12: Build C++ Verifier
    - name: 'Build C++ Verifier'
      run: |
        echo "‚öôÔ∏è Building C++ Verifier..."
        g++ -o GPGVerifier GPGVerifier.cpp
        echo "‚úÖ C++ Build Completed Successfully"

    # ‚úÖ Step 13: Unzip Updated output.zip for C++ Verification
    - name: 'Unzip Updated output.zip for Verification'
      run: |
        echo "üìÇ Unzipping updated output.zip for verification..."
        unzip -o output.zip -d verification_dir
        echo "‚úÖ Unzip Complete"

    # ‚úÖ Step 14: Run C++ Verification on Extracted Files
    - name: 'Run C++ Verification'
      run: |
        echo "üîç Running C++ Verification on Extracted Files..."
        ./GPGVerifier > verification_output.txt 2>&1
        echo "‚úÖ C++ Verification Completed"

    # ‚úÖ Step 15: Print C++ Verification Output
    - name: 'Print C++ Verification Output'
      run: |
        echo "üìÑ Printing C++ Verification Output..."
        if [ -f "verification_output.txt" ]; then
          cat verification_output.txt
        else
          echo "‚ö†Ô∏è No verification_output.txt file found"
        fi

    # ‚úÖ Step 16: Upload Verification Results as Artifact
    - name: 'Upload Verification Results'
      uses: actions/upload-artifact@v4
      with:
        name: verification-results
        path: verification_output.txt
